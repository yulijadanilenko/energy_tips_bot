import os
import json
import telebot
from telebot import types
import random
import logging
from datetime import datetime

# gspread + google-auth –¥–ª—è Google Sheets
import gspread
from google.oauth2.service_account import Credentials


class MessageHandler:
    def __init__(self, token, config):
        self.bot = telebot.TeleBot(token)
        self.config = config
        self.logger = logging.getLogger("telegram_bot")

        # (chat_id, message_id, user_id) ‚Äî —á—Ç–æ–±—ã –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –Ω–µ –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –¥–≤–∞–∂–¥—ã –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å
        self._answered = set()

        # ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets ----------
        self.gc = None
        self.sheet = None
        try:
            creds_json = os.getenv("GOOGLE_CREDENTIALS", "")
            spreadsheet_id = os.getenv("SPREADSHEET_ID", "")

            # üîé –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏—à–ª–∏
            self.logger.info(
                f"ENV check: creds_len={len(creds_json)}, sheet_id_head={spreadsheet_id[:8]}"
            )

            if creds_json and spreadsheet_id:
                info = json.loads(creds_json)

                scopes = [
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/drive",
                ]
                creds = Credentials.from_service_account_info(info, scopes=scopes)
                self.gc = gspread.authorize(creds)

                # –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º ‚ÄúResponses‚Äù)
                sh = self.gc.open_by_key(spreadsheet_id)
                try:
                    self.sheet = sh.worksheet("Responses")
                except gspread.exceptions.WorksheetNotFound:
                    self.sheet = sh.add_worksheet(title="Responses", rows="1000", cols="20")
                    # —à–∞–ø–∫–∞
                    self.sheet.append_row(
                        ["timestamp", "chat_title", "chat_id", "user", "user_id",
                         "question_key", "answer_value", "message_id"],
                        value_input_option="USER_ENTERED"
                    )

                # üîé –û–¢–õ–ê–î–ö–ê: –∫—Ç–æ –º—ã –¥–ª—è Google
                self.logger.info(f"Google Sheets OK as {info.get('client_email')}")
            else:
                # –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî —è–≤–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
                self.logger.warning(
                    "GOOGLE_CREDENTIALS or SPREADSHEET_ID not set ‚Äì answers won't be saved to Sheets."
                )
        except Exception:
            # –ø–æ–ª–Ω—ã–π traceback, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–∏–¥–µ—Ç—å –ø—Ä–∏—á–∏–Ω—É
            self.logger.exception("Failed to init Google Sheets")

        self._register_handlers()

    # ---------------- –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ----------------
    def _inline_keyboard(self, key, buttons):
        kb = types.InlineKeyboardMarkup(row_width=2)
        if not buttons:
            return kb

        inline_buttons = []
        for i, label in enumerate(buttons):
            data = f"answer:{key}:{'yes' if i == 0 else 'no'}"
            inline_buttons.append(types.InlineKeyboardButton(label, callback_data=data))

        if len(inline_buttons) == 1:
            inline_buttons.append(
                types.InlineKeyboardButton("ü§î –ü–æ–∫–∞ –Ω–µ—Ç", callback_data=f"answer:{key}:no")
            )
        kb.add(*inline_buttons)
        return kb

    # ---------------- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------------
    def send_daily_message(self):
        messages = self.config.get("messages", [])
        if not messages:
            self.logger.warning("No messages found in config.")
            return

        message = random.choice(messages)
        text = (message.get("text") or "").strip()
        if not text:
            self.logger.warning("Empty message text, skipping.")
            return

        key = message.get("key", "q")
        buttons = message.get("buttons", [])
        kb = self._inline_keyboard(key, buttons)

        for group in self.config.get("groups", []):
            try:
                self.bot.send_message(group["id"], text, reply_markup=kb)
                self.logger.info(f"Sent to {group['name']}")
            except Exception as e:
                self.logger.error(f"Failed for {group['name']}: {e}")

    # ---------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ----------------
    def _register_handlers(self):

        @self.bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("answer:"))
        def _on_answer(call: types.CallbackQuery):
            # --- —Ä–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∞ ---
            try:
                _, key, val = call.data.split(":")
            except Exception:
                try:
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                finally:
                    return

            # --- –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å ---
            answered_key = (call.message.chat.id, call.message.message_id, call.from_user.id)
            if answered_key in self._answered:
                self.bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ üëç")
                return
            self._answered.add(answered_key)

            # --- –∑–∞–ø–∏—Å—å –≤ Google Sheets (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ) ---
            try:
                if self.sheet:
                    ts = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                    chat_title = getattr(call.message.chat, "title", "") or (call.message.chat.username or "")
                    user_name = (call.from_user.full_name or "").strip()

                    row = [
                        ts,
                        chat_title,
                        call.message.chat.id,
                        user_name,
                        call.from_user.id,
                        key,
                        val,
                        call.message.message_id,
                    ]
                    self.sheet.append_row(row, value_input_option="USER_ENTERED")
                    self.logger.info(f"Sheet append OK: {row[:4]} ...")
                else:
                    self.logger.warning("Sheet is not initialized; skipping append.")
            except Exception:
                self.logger.exception("Failed to append to sheet")

            # --- –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
            msg = "üëç –ü—Ä–∏–Ω—è—Ç–æ! –°–ø–∞—Å–∏–±–æ." if val == "yes" else "‚úÖ –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω."
            try:
                self.bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
                # –û—Ç–≤–µ—Ç–∏–º –≤ –Ω–∏—Ç–∫–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
                self.bot.send_message(
                    call.message.chat.id,
                    msg,
                    reply_to_message_id=call.message.message_id
                )
            except Exception as e:
                self.logger.error(f"Error sending response: {e}")

            # –í–∞–∂–Ω–æ: –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï —É–±–∏—Ä–∞–µ–º,
            # —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç–æ–∂–µ –º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å.

    # ---------------- –ó–∞–ø—É—Å–∫ ----------------
    def start(self):
        self.logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —Å–æ–æ–±—â–µ–Ω–∏–π.")
        self.bot.infinity_polling()

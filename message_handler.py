import logging
import random
import threading
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


class MessageHandler:
    def __init__(self, token, config):
        self.bot = telebot.TeleBot(token, parse_mode="HTML")
        self.config = config
        self.logger = logging.getLogger("telegram_bot")

        # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ
        self._register_handlers()
        self._start_polling_thread()

    # ---------- helpers ----------
    def _register_handlers(self):
        @self.bot.callback_query_handler(func=lambda c: c.data.startswith("answer:"))
        def on_answer(call):
            try:
                _, key, decision = call.data.split(":", 2)

                # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è)
                try:
                    self.bot.edit_message_reply_markup(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        reply_markup=None,
                    )
                except Exception:
                    pass

                # –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–∏–¥–±–µ–∫
                if decision == "yes":
                    reply = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üí™"
                else:
                    reply = "üëå –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —Å–µ–≥–æ–¥–Ω—è ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ!"

                self.bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω")
                self.bot.send_message(call.message.chat.id, reply)

            except Exception as e:
                self.logger.error(f"Failed to process answer: {e}")

    def _start_polling_thread(self):
        def _poll():
            while True:
                try:
                    self.bot.infinity_polling(timeout=60, long_polling_timeout=60)
                except Exception as e:
                    self.logger.error(f"Polling crashed: {e}")

        t = threading.Thread(target=_poll, daemon=True)
        t.start()

    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

def _inline_keyboard(self, key: str, labels: list | None) -> InlineKeyboardMarkup:
    # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç/–º–∞–ª–æ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç
    labels = labels or ["üëç –î–∞", "ü§î –ü–æ–∫–∞ –Ω–µ—Ç"]

    kb = InlineKeyboardMarkup(row_width=2)
    buttons = []

    # –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (yes)
    if len(labels) >= 1 and labels[0]:
        buttons.append(
            InlineKeyboardButton(
                labels[0], callback_data=f"answer:{key}:yes"
            )
        )

    # –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (no)
    if len(labels) >= 2 and labels[1]:
        buttons.append(
            InlineKeyboardButton(
                labels[1], callback_data=f"answer:{key}:no"
            )
        )

    # –µ—Å–ª–∏ –≤—Å—ë –∂–µ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî –¥–æ–±–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É ¬´–ü–æ–∫–∞ –Ω–µ—Ç¬ª
    if len(buttons) == 1:
        buttons.append(
            InlineKeyboardButton(
                "ü§î –ü–æ–∫–∞ –Ω–µ—Ç", callback_data=f"answer:{key}:no"
            )
        )

    kb.add(*buttons)
    return kb

    # ----------- scheduler job -----------
    def send_daily_message(self):
        messages = self.config.get("messages", [])
        if not messages:
            self.logger.warning("No messages in config")
            return

        message = random.choice(messages)
        text = (message.get("text") or "").strip()
        if not text:
            self.logger.warning("Empty message text")
            return

        key = message.get("key", "q")
        kb = self._inline_keyboard(key, message.get("buttons", []))

        for group in self.config.get("groups", []):
            try:
                self.bot.send_message(group["id"], text, reply_markup=kb)
                self.logger.info(f"Sent to {group['name']}")
            except Exception as e:
                self.logger.error(f"Failed for {group['name']}: {e}")
